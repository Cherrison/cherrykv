// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cherrykvpb.proto

package cherrykvpb

import (
	context "context"
	fmt "fmt"
	math "math"

	kvrpcpb "github.com/cherrison/cherrykv/proto/pkg/kvrpcpb"
	raft_serverpb "github.com/cherrison/cherrykv/proto/pkg/raft_serverpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("cherrykvpb.proto", fileDescriptor_7f28538d11858eb1) }

var fileDescriptor_7f28538d11858eb1 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xcf, 0x8a, 0xd3, 0x40,
	0x1c, 0xc7, 0x1b, 0xd0, 0x58, 0x07, 0x16, 0xcb, 0x74, 0xd5, 0xdd, 0xb8, 0x46, 0xd8, 0x93, 0xa7,
	0x0a, 0x2a, 0x78, 0x10, 0x05, 0x37, 0x85, 0x3d, 0x4c, 0x85, 0x32, 0xd5, 0xb3, 0x4c, 0xc3, 0xaf,
	0x4d, 0x49, 0x9a, 0x89, 0x33, 0x93, 0x89, 0xbe, 0x89, 0x8f, 0xe4, 0xd1, 0x47, 0x90, 0xfa, 0x0e,
	0x9e, 0x97, 0x24, 0xcc, 0xe4, 0x4f, 0xd3, 0xdb, 0xe4, 0xf3, 0xfd, 0x7d, 0x3f, 0x21, 0x93, 0x19,
	0x34, 0x09, 0x23, 0x10, 0xe2, 0x67, 0xac, 0xb3, 0xf5, 0x2c, 0x13, 0x5c, 0x71, 0x8c, 0x1a, 0xe2,
	0x9d, 0xc5, 0x5a, 0x64, 0xa1, 0x89, 0xbc, 0xa9, 0x60, 0x1b, 0xf5, 0x4d, 0x82, 0xd0, 0x20, 0x2c,
	0x3c, 0xdf, 0xf2, 0x2d, 0xaf, 0x96, 0xaf, 0xca, 0x55, 0x4d, 0x5f, 0xff, 0x77, 0xd1, 0x38, 0xa8,
	0x44, 0x44, 0xe3, 0xb7, 0xe8, 0x3e, 0xd1, 0xb7, 0xa0, 0xf0, 0x74, 0x66, 0x84, 0xb7, 0xa0, 0x28,
	0x7c, 0xcf, 0x41, 0x2a, 0xef, 0xbc, 0x0b, 0x65, 0xc6, 0x53, 0x09, 0xd7, 0x23, 0xfc, 0x0e, 0xb9,
	0x44, 0xaf, 0x42, 0x96, 0xe2, 0x66, 0xa2, 0x7c, 0x34, 0xbd, 0xc7, 0x3d, 0x6a, 0x8b, 0x01, 0x42,
	0x44, 0x2f, 0x05, 0x14, 0x62, 0xa7, 0x00, 0x5f, 0xd8, 0x31, 0x83, 0x8c, 0xe0, 0x72, 0x20, 0xb1,
	0x92, 0x0f, 0x68, 0x4c, 0x74, 0xc0, 0xf7, 0xfb, 0x9d, 0xc2, 0x4f, 0xec, 0x60, 0x0d, 0x8c, 0xe0,
	0xe9, 0x11, 0xb7, 0xf5, 0xaf, 0x68, 0x42, 0x74, 0x10, 0x41, 0x18, 0x7f, 0xf9, 0x91, 0xae, 0x14,
	0x53, 0xb9, 0xc4, 0x7e, 0x33, 0xde, 0x09, 0x8c, 0xee, 0xc5, 0xc9, 0xdc, 0x6a, 0x29, 0x7a, 0x44,
	0xf4, 0x0d, 0x53, 0x61, 0x44, 0x79, 0x92, 0xac, 0x59, 0x18, 0xe3, 0xe7, 0xb6, 0xd5, 0xe1, 0x46,
	0xea, 0x9f, 0x8a, 0xad, 0x73, 0x81, 0xce, 0x88, 0xa6, 0x20, 0x79, 0xa2, 0x61, 0xc1, 0xc3, 0x18,
	0x3f, 0xb3, 0x95, 0x16, 0x35, 0xbe, 0xab, 0xe1, 0xd0, 0xda, 0xde, 0x23, 0x97, 0xb2, 0xa2, 0xfc,
	0xd9, 0xcd, 0xae, 0xd5, 0xe0, 0x78, 0xd7, 0x0c, 0xef, 0x95, 0x97, 0x79, 0xaf, 0xbc, 0xcc, 0x87,
	0xcb, 0x15, 0xb7, 0xe5, 0x39, 0x7a, 0x48, 0x59, 0x31, 0x87, 0x04, 0x14, 0xe0, 0xcb, 0xf6, 0x5c,
	0xcd, 0x8c, 0xc2, 0x1b, 0x8a, 0xac, 0xe5, 0x23, 0x7a, 0x40, 0x59, 0x51, 0x1d, 0xbb, 0xce, 0xbb,
	0xda, 0x27, 0xef, 0xe2, 0x38, 0x68, 0x7d, 0xc2, 0x3d, 0xca, 0x36, 0x0a, 0x7b, 0xb3, 0xee, 0x65,
	0x29, 0xe1, 0x67, 0x90, 0x92, 0x6d, 0xc1, 0x9b, 0xf6, 0xb2, 0x39, 0x4f, 0xe1, 0x7a, 0xf4, 0xd2,
	0xc1, 0x9f, 0xd0, 0x78, 0x95, 0xb2, 0x4c, 0x46, 0x5c, 0xe1, 0xab, 0xde, 0x90, 0x09, 0x82, 0x28,
	0x4f, 0xe3, 0x93, 0x8a, 0x9b, 0xc9, 0xef, 0x83, 0xef, 0xfc, 0x39, 0xf8, 0xce, 0xdf, 0x83, 0xef,
	0xfc, 0xfa, 0xe7, 0x8f, 0xd6, 0x6e, 0x75, 0x23, 0xdf, 0xdc, 0x05, 0x00, 0x00, 0xff, 0xff, 0x97,
	0x91, 0x14, 0xc1, 0xeb, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CherryKvClient is the client API for CherryKv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CherryKvClient interface {
	// KV commands with mvcc/txn supported.
	KvGet(ctx context.Context, in *kvrpcpb.GetRequest, opts ...grpc.CallOption) (*kvrpcpb.GetResponse, error)
	KvScan(ctx context.Context, in *kvrpcpb.ScanRequest, opts ...grpc.CallOption) (*kvrpcpb.ScanResponse, error)
	KvPrewrite(ctx context.Context, in *kvrpcpb.PrewriteRequest, opts ...grpc.CallOption) (*kvrpcpb.PrewriteResponse, error)
	KvCommit(ctx context.Context, in *kvrpcpb.CommitRequest, opts ...grpc.CallOption) (*kvrpcpb.CommitResponse, error)
	KvCheckTxnStatus(ctx context.Context, in *kvrpcpb.CheckTxnStatusRequest, opts ...grpc.CallOption) (*kvrpcpb.CheckTxnStatusResponse, error)
	KvBatchRollback(ctx context.Context, in *kvrpcpb.BatchRollbackRequest, opts ...grpc.CallOption) (*kvrpcpb.BatchRollbackResponse, error)
	KvResolveLock(ctx context.Context, in *kvrpcpb.ResolveLockRequest, opts ...grpc.CallOption) (*kvrpcpb.ResolveLockResponse, error)
	// RawKV commands.
	RawGet(ctx context.Context, in *kvrpcpb.RawGetRequest, opts ...grpc.CallOption) (*kvrpcpb.RawGetResponse, error)
	RawPut(ctx context.Context, in *kvrpcpb.RawPutRequest, opts ...grpc.CallOption) (*kvrpcpb.RawPutResponse, error)
	RawDelete(ctx context.Context, in *kvrpcpb.RawDeleteRequest, opts ...grpc.CallOption) (*kvrpcpb.RawDeleteResponse, error)
	RawScan(ctx context.Context, in *kvrpcpb.RawScanRequest, opts ...grpc.CallOption) (*kvrpcpb.RawScanResponse, error)
	// Raft commands (cherrykv <-> cherrykv).
	Raft(ctx context.Context, opts ...grpc.CallOption) (CherryKv_RaftClient, error)
	Snapshot(ctx context.Context, opts ...grpc.CallOption) (CherryKv_SnapshotClient, error)
}

type cherryKvClient struct {
	cc *grpc.ClientConn
}

func NewCherryKvClient(cc *grpc.ClientConn) CherryKvClient {
	return &cherryKvClient{cc}
}

func (c *cherryKvClient) KvGet(ctx context.Context, in *kvrpcpb.GetRequest, opts ...grpc.CallOption) (*kvrpcpb.GetResponse, error) {
	out := new(kvrpcpb.GetResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/KvGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) KvScan(ctx context.Context, in *kvrpcpb.ScanRequest, opts ...grpc.CallOption) (*kvrpcpb.ScanResponse, error) {
	out := new(kvrpcpb.ScanResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/KvScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) KvPrewrite(ctx context.Context, in *kvrpcpb.PrewriteRequest, opts ...grpc.CallOption) (*kvrpcpb.PrewriteResponse, error) {
	out := new(kvrpcpb.PrewriteResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/KvPrewrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) KvCommit(ctx context.Context, in *kvrpcpb.CommitRequest, opts ...grpc.CallOption) (*kvrpcpb.CommitResponse, error) {
	out := new(kvrpcpb.CommitResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/KvCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) KvCheckTxnStatus(ctx context.Context, in *kvrpcpb.CheckTxnStatusRequest, opts ...grpc.CallOption) (*kvrpcpb.CheckTxnStatusResponse, error) {
	out := new(kvrpcpb.CheckTxnStatusResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/KvCheckTxnStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) KvBatchRollback(ctx context.Context, in *kvrpcpb.BatchRollbackRequest, opts ...grpc.CallOption) (*kvrpcpb.BatchRollbackResponse, error) {
	out := new(kvrpcpb.BatchRollbackResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/KvBatchRollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) KvResolveLock(ctx context.Context, in *kvrpcpb.ResolveLockRequest, opts ...grpc.CallOption) (*kvrpcpb.ResolveLockResponse, error) {
	out := new(kvrpcpb.ResolveLockResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/KvResolveLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) RawGet(ctx context.Context, in *kvrpcpb.RawGetRequest, opts ...grpc.CallOption) (*kvrpcpb.RawGetResponse, error) {
	out := new(kvrpcpb.RawGetResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/RawGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) RawPut(ctx context.Context, in *kvrpcpb.RawPutRequest, opts ...grpc.CallOption) (*kvrpcpb.RawPutResponse, error) {
	out := new(kvrpcpb.RawPutResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/RawPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) RawDelete(ctx context.Context, in *kvrpcpb.RawDeleteRequest, opts ...grpc.CallOption) (*kvrpcpb.RawDeleteResponse, error) {
	out := new(kvrpcpb.RawDeleteResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/RawDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) RawScan(ctx context.Context, in *kvrpcpb.RawScanRequest, opts ...grpc.CallOption) (*kvrpcpb.RawScanResponse, error) {
	out := new(kvrpcpb.RawScanResponse)
	err := c.cc.Invoke(ctx, "/cherrykvpb.CherryKv/RawScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cherryKvClient) Raft(ctx context.Context, opts ...grpc.CallOption) (CherryKv_RaftClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CherryKv_serviceDesc.Streams[0], "/cherrykvpb.CherryKv/Raft", opts...)
	if err != nil {
		return nil, err
	}
	x := &cherryKvRaftClient{stream}
	return x, nil
}

type CherryKv_RaftClient interface {
	Send(*raft_serverpb.RaftMessage) error
	CloseAndRecv() (*raft_serverpb.Done, error)
	grpc.ClientStream
}

type cherryKvRaftClient struct {
	grpc.ClientStream
}

func (x *cherryKvRaftClient) Send(m *raft_serverpb.RaftMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cherryKvRaftClient) CloseAndRecv() (*raft_serverpb.Done, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(raft_serverpb.Done)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cherryKvClient) Snapshot(ctx context.Context, opts ...grpc.CallOption) (CherryKv_SnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CherryKv_serviceDesc.Streams[1], "/cherrykvpb.CherryKv/Snapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &cherryKvSnapshotClient{stream}
	return x, nil
}

type CherryKv_SnapshotClient interface {
	Send(*raft_serverpb.SnapshotChunk) error
	CloseAndRecv() (*raft_serverpb.Done, error)
	grpc.ClientStream
}

type cherryKvSnapshotClient struct {
	grpc.ClientStream
}

func (x *cherryKvSnapshotClient) Send(m *raft_serverpb.SnapshotChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cherryKvSnapshotClient) CloseAndRecv() (*raft_serverpb.Done, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(raft_serverpb.Done)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CherryKvServer is the server API for CherryKv service.
type CherryKvServer interface {
	// KV commands with mvcc/txn supported.
	KvGet(context.Context, *kvrpcpb.GetRequest) (*kvrpcpb.GetResponse, error)
	KvScan(context.Context, *kvrpcpb.ScanRequest) (*kvrpcpb.ScanResponse, error)
	KvPrewrite(context.Context, *kvrpcpb.PrewriteRequest) (*kvrpcpb.PrewriteResponse, error)
	KvCommit(context.Context, *kvrpcpb.CommitRequest) (*kvrpcpb.CommitResponse, error)
	KvCheckTxnStatus(context.Context, *kvrpcpb.CheckTxnStatusRequest) (*kvrpcpb.CheckTxnStatusResponse, error)
	KvBatchRollback(context.Context, *kvrpcpb.BatchRollbackRequest) (*kvrpcpb.BatchRollbackResponse, error)
	KvResolveLock(context.Context, *kvrpcpb.ResolveLockRequest) (*kvrpcpb.ResolveLockResponse, error)
	// RawKV commands.
	RawGet(context.Context, *kvrpcpb.RawGetRequest) (*kvrpcpb.RawGetResponse, error)
	RawPut(context.Context, *kvrpcpb.RawPutRequest) (*kvrpcpb.RawPutResponse, error)
	RawDelete(context.Context, *kvrpcpb.RawDeleteRequest) (*kvrpcpb.RawDeleteResponse, error)
	RawScan(context.Context, *kvrpcpb.RawScanRequest) (*kvrpcpb.RawScanResponse, error)
	// Raft commands (cherrykv <-> cherrykv).
	Raft(CherryKv_RaftServer) error
	Snapshot(CherryKv_SnapshotServer) error
}

// UnimplementedCherryKvServer can be embedded to have forward compatible implementations.
type UnimplementedCherryKvServer struct {
}

func (*UnimplementedCherryKvServer) KvGet(ctx context.Context, req *kvrpcpb.GetRequest) (*kvrpcpb.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvGet not implemented")
}
func (*UnimplementedCherryKvServer) KvScan(ctx context.Context, req *kvrpcpb.ScanRequest) (*kvrpcpb.ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvScan not implemented")
}
func (*UnimplementedCherryKvServer) KvPrewrite(ctx context.Context, req *kvrpcpb.PrewriteRequest) (*kvrpcpb.PrewriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvPrewrite not implemented")
}
func (*UnimplementedCherryKvServer) KvCommit(ctx context.Context, req *kvrpcpb.CommitRequest) (*kvrpcpb.CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvCommit not implemented")
}
func (*UnimplementedCherryKvServer) KvCheckTxnStatus(ctx context.Context, req *kvrpcpb.CheckTxnStatusRequest) (*kvrpcpb.CheckTxnStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvCheckTxnStatus not implemented")
}
func (*UnimplementedCherryKvServer) KvBatchRollback(ctx context.Context, req *kvrpcpb.BatchRollbackRequest) (*kvrpcpb.BatchRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvBatchRollback not implemented")
}
func (*UnimplementedCherryKvServer) KvResolveLock(ctx context.Context, req *kvrpcpb.ResolveLockRequest) (*kvrpcpb.ResolveLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvResolveLock not implemented")
}
func (*UnimplementedCherryKvServer) RawGet(ctx context.Context, req *kvrpcpb.RawGetRequest) (*kvrpcpb.RawGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawGet not implemented")
}
func (*UnimplementedCherryKvServer) RawPut(ctx context.Context, req *kvrpcpb.RawPutRequest) (*kvrpcpb.RawPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawPut not implemented")
}
func (*UnimplementedCherryKvServer) RawDelete(ctx context.Context, req *kvrpcpb.RawDeleteRequest) (*kvrpcpb.RawDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawDelete not implemented")
}
func (*UnimplementedCherryKvServer) RawScan(ctx context.Context, req *kvrpcpb.RawScanRequest) (*kvrpcpb.RawScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawScan not implemented")
}
func (*UnimplementedCherryKvServer) Raft(srv CherryKv_RaftServer) error {
	return status.Errorf(codes.Unimplemented, "method Raft not implemented")
}
func (*UnimplementedCherryKvServer) Snapshot(srv CherryKv_SnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}

func RegisterCherryKvServer(s *grpc.Server, srv CherryKvServer) {
	s.RegisterService(&_CherryKv_serviceDesc, srv)
}

func _CherryKv_KvGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).KvGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/KvGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).KvGet(ctx, req.(*kvrpcpb.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_KvScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).KvScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/KvScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).KvScan(ctx, req.(*kvrpcpb.ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_KvPrewrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.PrewriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).KvPrewrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/KvPrewrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).KvPrewrite(ctx, req.(*kvrpcpb.PrewriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_KvCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).KvCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/KvCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).KvCommit(ctx, req.(*kvrpcpb.CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_KvCheckTxnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.CheckTxnStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).KvCheckTxnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/KvCheckTxnStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).KvCheckTxnStatus(ctx, req.(*kvrpcpb.CheckTxnStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_KvBatchRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.BatchRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).KvBatchRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/KvBatchRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).KvBatchRollback(ctx, req.(*kvrpcpb.BatchRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_KvResolveLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.ResolveLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).KvResolveLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/KvResolveLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).KvResolveLock(ctx, req.(*kvrpcpb.ResolveLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_RawGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.RawGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).RawGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/RawGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).RawGet(ctx, req.(*kvrpcpb.RawGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_RawPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.RawPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).RawPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/RawPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).RawPut(ctx, req.(*kvrpcpb.RawPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_RawDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.RawDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).RawDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/RawDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).RawDelete(ctx, req.(*kvrpcpb.RawDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_RawScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvrpcpb.RawScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CherryKvServer).RawScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cherrykvpb.CherryKv/RawScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CherryKvServer).RawScan(ctx, req.(*kvrpcpb.RawScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CherryKv_Raft_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CherryKvServer).Raft(&cherryKvRaftServer{stream})
}

type CherryKv_RaftServer interface {
	SendAndClose(*raft_serverpb.Done) error
	Recv() (*raft_serverpb.RaftMessage, error)
	grpc.ServerStream
}

type cherryKvRaftServer struct {
	grpc.ServerStream
}

func (x *cherryKvRaftServer) SendAndClose(m *raft_serverpb.Done) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cherryKvRaftServer) Recv() (*raft_serverpb.RaftMessage, error) {
	m := new(raft_serverpb.RaftMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CherryKv_Snapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CherryKvServer).Snapshot(&cherryKvSnapshotServer{stream})
}

type CherryKv_SnapshotServer interface {
	SendAndClose(*raft_serverpb.Done) error
	Recv() (*raft_serverpb.SnapshotChunk, error)
	grpc.ServerStream
}

type cherryKvSnapshotServer struct {
	grpc.ServerStream
}

func (x *cherryKvSnapshotServer) SendAndClose(m *raft_serverpb.Done) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cherryKvSnapshotServer) Recv() (*raft_serverpb.SnapshotChunk, error) {
	m := new(raft_serverpb.SnapshotChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CherryKv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cherrykvpb.CherryKv",
	HandlerType: (*CherryKvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KvGet",
			Handler:    _CherryKv_KvGet_Handler,
		},
		{
			MethodName: "KvScan",
			Handler:    _CherryKv_KvScan_Handler,
		},
		{
			MethodName: "KvPrewrite",
			Handler:    _CherryKv_KvPrewrite_Handler,
		},
		{
			MethodName: "KvCommit",
			Handler:    _CherryKv_KvCommit_Handler,
		},
		{
			MethodName: "KvCheckTxnStatus",
			Handler:    _CherryKv_KvCheckTxnStatus_Handler,
		},
		{
			MethodName: "KvBatchRollback",
			Handler:    _CherryKv_KvBatchRollback_Handler,
		},
		{
			MethodName: "KvResolveLock",
			Handler:    _CherryKv_KvResolveLock_Handler,
		},
		{
			MethodName: "RawGet",
			Handler:    _CherryKv_RawGet_Handler,
		},
		{
			MethodName: "RawPut",
			Handler:    _CherryKv_RawPut_Handler,
		},
		{
			MethodName: "RawDelete",
			Handler:    _CherryKv_RawDelete_Handler,
		},
		{
			MethodName: "RawScan",
			Handler:    _CherryKv_RawScan_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Raft",
			Handler:       _CherryKv_Raft_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Snapshot",
			Handler:       _CherryKv_Snapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cherrykvpb.proto",
}
